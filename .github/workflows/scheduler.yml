name: Twitter Bot Scheduler

on:
  schedule:
    # Run every hour to handle all scheduled tasks
    - cron: '0 * * * *'  # Every hour at minute 0
    
  workflow_dispatch:
    inputs:
      bot_mode:
        description: 'Bot operation mode'
        required: true
        default: 'continuous'
        type: choice
        options:
          - continuous
          - standalone
          - thread
          - engage
          - test
      topic:
        description: 'Topic for content generation (optional)'
        required: false
        type: string
      duration_hours:
        description: 'How many hours to run (for continuous mode)'
        required: false
        default: '23'
        type: string

jobs:
  twitter-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 1440  # 24 hours max
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip xvfb
        
        # Install Google Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create environment file
      run: |
        cat > .env << EOF
        TWITTER_API_KEY=${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET=${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN=${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET=${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        TWITTER_USERNAME=${{ secrets.TWITTER_USERNAME }}
        TWITTER_PASSWORD=${{ secrets.TWITTER_PASSWORD }}
        TWITTER_EMAIL=${{ secrets.TWITTER_EMAIL }}
        BOT_USERNAME=${{ secrets.BOT_USERNAME }}
        TARGET_ACCOUNTS=${{ secrets.TARGET_ACCOUNTS }}
        EOF
    
    - name: Validate configuration
      run: python -c "from config import validate_config; validate_config()"
    
    - name: Setup virtual display for headless Chrome
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: Run bot
      env:
        DISPLAY: :99
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          if [ "${{ inputs.bot_mode }}" == "continuous" ]; then
            # Run continuous mode with timeout
            timeout ${{ inputs.duration_hours }}h python main.py continuous --duration ${{ inputs.duration_hours }} || echo "Bot completed scheduled run"
          elif [ "${{ inputs.bot_mode }}" == "standalone" ]; then
            if [ -n "${{ inputs.topic }}" ]; then
              python main.py standalone --topic "${{ inputs.topic }}"
            else
              python main.py standalone
            fi
          elif [ "${{ inputs.bot_mode }}" == "thread" ]; then
            if [ -n "${{ inputs.topic }}" ]; then
              python main.py thread --topic "${{ inputs.topic }}"
            else
              python main.py thread
            fi
          elif [ "${{ inputs.bot_mode }}" == "engage" ]; then
            python main.py engage
          elif [ "${{ inputs.bot_mode }}" == "test" ]; then
            python main.py test
          fi
        else
          # Scheduled run - run for 50 minutes to avoid overlap with next hourly run
          timeout 50m python main.py continuous --duration 1 || echo "Bot completed scheduled run"
        fi
    
    - name: Upload logs and artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bot-logs-${{ github.run_number }}
        path: |
          bot.log
          *.xlsx
          *_scroll_state.pkl
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Cleanup processes and files
      if: always()
      run: |
        # Clean up Chrome processes
        pkill -f chrome || true
        pkill -f chromedriver || true
        pkill -f Xvfb || true
        
        # Clean up temporary files but keep state files for resume capability
        rm -f /tmp/chrome* || true
        rm -f /tmp/.org.chromium.* || true
        
        # Clean up old media files if any
        find . -name "*.jpg" -o -name "*.png" -o -name "*.gif" -o -name "*.mp4" -mtime +1 -delete || true

  # Separate job for health check and monitoring
  health-check:
    runs-on: ubuntu-latest
    needs: twitter-bot
    if: always()
    
    steps:
    - name: Check bot health
      run: |
        if [ "${{ needs.twitter-bot.result }}" == "success" ]; then
          echo "✅ Bot executed successfully"
        elif [ "${{ needs.twitter-bot.result }}" == "failure" ]; then
          echo "❌ Bot execution failed"
          exit 1
        elif [ "${{ needs.twitter-bot.result }}" == "cancelled" ]; then
          echo "⚠️ Bot execution was cancelled"
        else
          echo "❓ Bot execution status unknown: ${{ needs.twitter-bot.result }}"
        fi
    
    - name: Notify on failure (optional)
      if: needs.twitter-bot.result == 'failure'
      run: |
        echo "Bot failed to execute properly. Check logs for details."
        # Add notification logic here if needed (webhook, email, etc.)
